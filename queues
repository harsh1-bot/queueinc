#include <stdio.h>
#include <stdlib.h>
#define MAX 100

// Stack structure
struct Stack {
    int data[MAX];
    int top;
};

// Initialize stack
void initStack(struct Stack *s) {
    s->top = -1;
}

// Check if stack is empty
int isEmpty(struct Stack *s) {
    return (s->top == -1);
}

// Check if stack is full
int isFull(struct Stack *s) {
    return (s->top == MAX - 1);
}

// Push item to stack
void push(struct Stack *s, int item) {
    if (isFull(s)) {
        printf("Stack overflow!\n");
        return;
    }
    s->data[++(s->top)] = item;
}

// Pop item from stack
int pop(struct Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow!\n");
        return -1;
    }
    return s->data[(s->top)--];
}

// Queue using two stacks
struct Queue {
    struct Stack stack1;
    struct Stack stack2;
};

// Initialize queue
void initQueue(struct Queue *q) {
    initStack(&q->stack1);
    initStack(&q->stack2);
}

// Enqueue operation
void enqueue(struct Queue *q, int item) {
    push(&q->stack1, item);
    printf("%d enqueued into the queue.\n", item);
}

// Dequeue operation
int dequeue(struct Queue *q) {
    if (isEmpty(&q->stack2)) {
        while (!isEmpty(&q->stack1)) {
            int poppedItem = pop(&q->stack1);
            push(&q->stack2, poppedItem);
        }
    }

    if (isEmpty(&q->stack2)) {
        printf("Queue underflow!\n");
        return -1;
    }

    return pop(&q->stack2);
}

// Main function
int main() {
    struct Queue q;
    initQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);

    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));

    enqueue(&q, 40);

    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));

    return 0;
}
